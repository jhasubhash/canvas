{"version":3,"sources":["core/WasmLoader.js","canvas/CanvasModel.js","canvas/Canvas.js","tool/customView/StrokeSliderView.js","tool/customView/EraserSliderView.js","tool/customView/ColorPickerView.js","tool/Toolbar.js","core/Controller.js","core/Loader.js","App.js","serviceWorker.js","index.js"],"names":["CanvasKitInit","require","a","Promise","resolve","reject","ready","then","CanvasKit","CanvasModel","this","canvasKit","canvas","loader","loadWasm","initCanvas","Canvas","props","canvasRef","React","createRef","canvasModel","current","loadCanvasKit","loaderRef","className","id","ref","Component","useStyles","makeStyles","root","height","valuetext","value","StrokeSliderView","classes","useState","getLastStrokeWidth","setValue","useEffect","setStrokeColor","getLastColor","setStrokeWidth","setLastColor","getStrokeColor","setLastStrokeWidth","getStrokeWidth","Slider","defaultValue","orientation","onChange","event","newValue","aria-labelledby","getAriaValueText","step","min","max","valueLabelDisplay","EraserSliderView","getLastEraserWidth","whiteColor","setLastEraserWidth","ColorPickerView","state","background","handleChangeComplete","color","rgb","setState","handleChange","onChangeComplete","Toolbar","enableStrokeSlider","enableOpacitySlider","enableEraserSlider","enableColorPalette","lastColor","val","setLastOpacity","lastOpacity","getLastOpacity","lastEraserWidth","lastStrokeWidth","handleClick","e","node","contains","target","handleClickOutside","handleStrokeSlider","forceUpdate","handleOpacitySlider","handleEraserSlider","handleColorPalette","handleClearCanvas","clearCanvas","handleUndo","undo","nextView","view","handleStartPan","handleEndPan","startPan","endPan","getOpacity","document","addEventListener","removeEventListener","ToggleButtonGroup","aria-label","variant","exclusive","ToggleButton","title","onClick","withStyles","theme","display","flexDirection","margin","spacing","width","scale","originx","originy","onMouseWheel","preventDefault","ctrlKey","mousex","clientX","offsetLeft","mousey","clientY","offsetTop","wheel","deltaY","zoom","Math","exp","skcanvas","translate","deltaX","doPan","onMouseMove","buttons","panning","offsetX","offsetY","hold","paths","length","lineTo","paint","SkPaint","setAntiAlias","clr","strokeColor","setColor","Color","r","g","b","setStyle","PaintStyle","Stroke","setStrokeCap","StrokeCap","Round","setStrokeJoin","StrokeJoin","strokeWidth","setPathEffect","SkPathEffect","MakeCorner","paints","push","path","SkPath","moveTo","drawFrame","setCurrentContext","context","clear","i","drawPath","flush","requestAnimationFrame","Controller","instance","canvaskit","surface","MakeCanvasSurface","currentContext","getCanvas","opacityVal","addListeners","pop","Loader","window","screen","style","cursor","initHtmlCanvas","Init","setOpacity","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fc3e7043.chunk.js","sourcesContent":["const CanvasKitInit = require('canvaskit-wasm/bin/canvaskit.js')\n\nexport default async function loadWasm(){\n    return new Promise((resolve, reject) => {\n        CanvasKitInit().ready().then((CanvasKit) => {\n            resolve(CanvasKit);\n        });\n    });\n}\n","import loadWasm from '../core/WasmLoader'\nexport class CanvasModel {\n    constructor() {\n        this.canvasKit = null;\n        this.canvas = null;\n        this.loader = null;\n    }\n\n    loadCanvasKit(canvas, loader){\n        this.canvas = canvas;\n        this.loader = loader;\n        loadWasm().then((CanvasKit) => {\n            this.canvasKit = CanvasKit;\n            this.loader.initCanvas(this.canvasKit, this.canvas);\n        });\n    }\n}","import React from 'react';\nimport {CanvasModel} from './CanvasModel';\nimport './Canvas.css'\n\nexport default class Canvas extends React.Component {\n    constructor(props) {\n        super(props);\n        this.canvasRef = React.createRef();\n        this.canvasModel = new CanvasModel();\n    }\n\n    componentDidMount() {\n        const canvas = this.canvasRef.current\n        this.canvasModel.loadCanvasKit(canvas, this.props.loaderRef);\n    }\n\n    render(){\n        return <div>\n        <canvas className=\"canvas\" id=\"canvas\" ref={this.canvasRef} />\n        </div>\n    }\n}","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Slider from '@material-ui/core/Slider';\n\nconst useStyles = makeStyles({\n  root: {\n    height: '100%',\n  },\n});\n\nfunction valuetext(value) {\n  return `${value}`;\n}\n\nexport default function StrokeSliderView(props) {\n  const classes = useStyles();\n  const [value, setValue] = React.useState(props.getLastStrokeWidth());\n  const handleSliderChange = (event, newValue) => {\n    setValue(newValue);\n    props.loader.setStrokeWidth(newValue);\n  };\n\n  React.useEffect(function() {\n    props.loader.setStrokeColor(props.getLastColor());\n    props.loader.setStrokeWidth(props.getLastStrokeWidth());\n    return function cleanup() {\n      props.setLastColor(props.loader.getStrokeColor());\n      props.setLastStrokeWidth(props.loader.getStrokeWidth());\n    }\n  }, [props]);\n\n  return (\n    <div className={classes.root}>\n        <Slider\n        defaultValue={value}\n        orientation=\"vertical\"\n        value={typeof value === 'number' ? value : 0}\n        onChange={handleSliderChange}\n        aria-labelledby=\"vertical-slider\"\n        getAriaValueText={valuetext}\n        step={0.25}\n        min={0.25}\n        max={100}\n        valueLabelDisplay=\"auto\"\n        />\n    </div>\n  );\n}\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Slider from '@material-ui/core/Slider';\n\nconst useStyles = makeStyles({\n  root: {\n    height: '100%',\n  },\n});\n\nfunction valuetext(value) {\n  return `${value}`;\n}\n\nexport default function EraserSliderView(props) {\n  const classes = useStyles();\n  const [value, setValue] = React.useState(props.getLastEraserWidth());\n  const whiteColor = {'r':255,'g':255,'b':255,'a':1};\n  const handleSliderChange = (event, newValue) => {\n    setValue(newValue);\n    props.loader.setStrokeWidth(newValue);\n  };\n\n  React.useEffect(function() {\n    props.loader.setStrokeColor(whiteColor);\n    props.loader.setStrokeWidth(props.getLastEraserWidth());\n    return function cleanup() {\n      props.setLastEraserWidth(props.loader.getStrokeWidth());\n    }\n  }, [props, whiteColor]);\n\n  return (\n    <div className={classes.root}>\n        <Slider\n        defaultValue={value}\n        orientation=\"vertical\"\n        value={typeof value === 'number' ? value : 0}\n        onChange={handleSliderChange}\n        aria-labelledby=\"vertical-slider\"\n        getAriaValueText={valuetext}\n        step={0.25}\n        min={0.25}\n        max={100}\n        valueLabelDisplay=\"auto\"\n        />\n    </div>\n  );\n}\n","import React from 'react';\nimport { ChromePicker } from 'react-color';\n\nexport default class ColorPickerView extends React.Component {\n    state = {\n        background: this.props.getLastColor(),\n    };\n    handleChangeComplete = (color) => {\n        this.props.setLastColor(color.rgb);\n        this.props.loader.setStrokeColor(color.rgb);\n        this.setState({ background: color.rgb });\n    };\n    handleChange = (color, event) => {\n        this.setState({ background: color.rgb });\n    };\n    render() {\n        return <ChromePicker \n            color={ this.state.background }\n            onChange={ this.handleChange }\n            onChangeComplete={ this.handleChangeComplete }\n        />;\n    }\n}","import React from 'react';\n// import { observable, computed, action, decorate } from \"mobx\";\nimport ToggleButton from '@material-ui/lab/ToggleButton';\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\nimport { withStyles } from '@material-ui/core/styles';\nimport CreateIcon from '@material-ui/icons/Create';\nimport PaletteIcon from '@material-ui/icons/Palette';\nimport UndoIcon from '@material-ui/icons/Undo';\nimport PanToolIcon from '@material-ui/icons/PanTool';\n/*import OpacityIcon from '@material-ui/icons/Opacity';\nimport ColorizeIcon from '@material-ui/icons/Colorize';\nimport Shape from 'mdi-material-ui/Shape';\nimport OpacitySliderView from './customView/OpacitySliderView';*/\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport Eraser from 'mdi-material-ui/Eraser';\nimport StrokeSliderView from './customView/StrokeSliderView';\nimport EraserSliderView from './customView/EraserSliderView';\nimport ColorPickerView from './customView/ColorPickerView';\nimport './Toolbar.css'\n\nconst uiStyles = (theme) => ({\n    root: {\n      display: 'flex',\n      flexDirection: 'column',\n      '& > *': {\n        margin: theme.spacing(1),\n      },\n      width: 'fit-content'\n    },\n});\n\nclass Toolbar extends React.Component {\n    enableStrokeSlider = false;\n    enableOpacitySlider = false;\n    enableEraserSlider = false;\n    enableColorPalette = false;\n    lastColor = null;\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            view: 'undefined'\n        };\n        this.lastColor = props.loaderRef.getStrokeColor();\n        this.lastStrokeWidth = props.loaderRef.getStrokeWidth();\n        this.lastEraserWidth = props.loaderRef.getStrokeWidth();\n        this.lastOpacity = props.loaderRef.getOpacity();\n    }\n\n    setLastColor = (val) => {\n        this.lastColor = val;\n    }\n\n    getLastColor = () => {\n        return this.lastColor;\n    }\n\n    setLastOpacity = (val) => {\n        this.lastOpacity = val;\n    }\n\n    getLastOpacity = () => {\n        return this.lastOpacity;\n    }\n    getLastEraserWidth = () =>{\n        return this.lastEraserWidth;\n    }\n    getLastStrokeWidth = () =>{\n        return this.lastStrokeWidth;\n    }\n    setLastEraserWidth = (val) =>{\n        this.lastEraserWidth = val;\n    }\n    setLastStrokeWidth = (val) =>{\n        this.lastStrokeWidth = val;\n    }\n\n    componentDidMount() {\n    }\n\n    componentWillMount() {\n        document.addEventListener(\"mousedown\", this.handleClick, false);\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener(\"mousedown\", this.handleClick, false);\n    }\n\n    handleClick = (e) => {\n        if(this.node.contains(e.target)){\n            return;\n        }\n        this.handleClickOutside();\n    }\n\n    handleClickOutside() {\n        this.enableStrokeSlider = false;\n        this.enableOpacitySlider = false;\n        this.enableEraserSlider = false;\n        this.enableColorPalette = false;\n        this.forceUpdate();\n    }\n\n    handleStrokeSlider = () => {\n        this.enableStrokeSlider = !this.enableStrokeSlider;\n        this.enableOpacitySlider = false;\n        this.enableEraserSlider = false;\n        this.enableColorPalette = false;\n        this.forceUpdate();\n    }\n    handleOpacitySlider = () => {\n        this.enableOpacitySlider = !this.enableOpacitySlider;\n        this.enableStrokeSlider = false;\n        this.enableEraserSlider = false;\n        this.enableColorPalette = false;\n        this.forceUpdate();\n    }\n    handleEraserSlider = () => {\n        this.enableEraserSlider = !this.enableEraserSlider;\n        this.enableStrokeSlider = false;\n        this.enableOpacitySlider = false;\n        this.enableColorPalette = false;\n        this.forceUpdate();\n    }\n    handleColorPalette = () => {\n        this.enableStrokeSlider = false;\n        this.enableOpacitySlider = false;\n        this.enableEraserSlider = false;\n        this.enableColorPalette = !this.enableColorPalette;\n        this.forceUpdate();\n    }\n\n    handleClearCanvas = () => {\n        this.props.loaderRef.clearCanvas();\n    }\n\n    handleUndo = ()=> {\n        this.props.loaderRef.undo();\n    }\n\n    handleChange = (event, nextView) => {\n        if(nextView === 'Pan' && this.state.view !== 'Pan')\n            this.handleStartPan();\n        if(nextView !== 'Pan' && this.state.view === 'Pan')\n            this.handleEndPan();\n        if(nextView === 'Color Palette' || nextView === 'Clear Canvas')\n            this.setState({ view: 'Pen'});\n        else if(nextView !== null)\n            this.setState({ view: nextView});\n    };\n\n    handleStartPan = () =>{\n        this.props.loaderRef.startPan();\n    }\n    handleEndPan = () =>{\n        this.props.loaderRef.endPan();\n    }\n\n    render(){\n        const { classes } = this.props;\n        return <div className={'rowC'}>\n            <div className={classes.root}>\n                <ToggleButtonGroup\n                    orientation=\"vertical\"\n                    aria-label=\"vertical outlined primary button group\"\n                    variant=\"contained\"\n                    value={this.state.view} \n                    exclusive \n                    onChange={this.handleChange}\n                >\n                    <ToggleButton title=\"Pen\" value=\"Pen\" onClick={this.handleStrokeSlider} ><CreateIcon/></ToggleButton>\n                    <ToggleButton title=\"Eraser\" value=\"Eraser\" onClick={this.handleEraserSlider}><Eraser/></ToggleButton>\n                    {/*<ToggleButton title=\"Pan\" value=\"Pan\"><PanToolIcon/></ToggleButton>*/}\n                    {/*<Button title=\"Opacity\" onClick={this.handleOpacitySlider}><OpacityIcon/></Button>*/}\n                    <ToggleButton title=\"Color Palette\" value=\"Color Palette\" onClick={this.handleColorPalette}><PaletteIcon/></ToggleButton>\n                    {/*<Button title=\"Color Picker\"><ColorizeIcon/></Button>\n                    <Button title=\"Shapes\"><Shape/></Button>*/}\n                    <ToggleButton title=\"Clear Canvas\" value=\"Clear Canvas\" onClick={this.handleClearCanvas} ><DeleteIcon/></ToggleButton>\n                </ToggleButtonGroup>\n                <ToggleButtonGroup\n                    orientation=\"vertical\"\n                    aria-label=\"vertical outlined primary button group\"\n                    variant=\"contained\"\n                >\n                    <ToggleButton title=\"Undo\" onClick={this.handleUndo}><UndoIcon/></ToggleButton>\n                </ToggleButtonGroup>\n            </div>\n            <div className={'sliderC'} ref = {node => this.node = node}>\n                {this.enableStrokeSlider && <StrokeSliderView \n                                                setLastColor = {this.setLastColor} \n                                                getLastColor = {this.getLastColor}\n                                                setLastStrokeWidth = {this.setLastStrokeWidth}\n                                                getLastStrokeWidth = {this.getLastStrokeWidth}\n                                                loader = {this.props.loaderRef}\n                                            />}\n                {this.enableEraserSlider && <EraserSliderView \n                                                setLastEraserWidth = {this.setLastEraserWidth}\n                                                getLastEraserWidth = {this.getLastEraserWidth}\n                                                loader={this.props.loaderRef}\n                                            />}\n                {/*this.enableOpacitySlider && <OpacitySliderView \n                                                setLastOpacity = {this.setLastOpacity}\n                                                getLastOpacity = {this.getLastOpacity}\n                                                loader={this.props.loaderRef}\n                />*/}\n                {this.enableColorPalette && <ColorPickerView \n                                                setLastColor = {this.setLastColor} \n                                                getLastColor = {this.getLastColor}\n                                                loader={this.props.loaderRef}\n                                            />}\n            </div>\n        </div>\n    }\n}\n\nexport default withStyles(uiStyles)(Toolbar);","\nlet zoomIntensity = 0.2;\nlet scale = 1;\nlet originx = 0;\nlet originy = 0;\n\nclass Controller {\n    constructor(){\n        if (!Controller.instance){\n            Controller.instance = this;\n            this.canvasKit = null;\n            this.paints = [];\n            this.paths = [];\n            this.hold = false;\n            this.path = null;\n            this.strokeColor = {'r':0,'g':0,'b':0,'a':1};\n            this.strokeWidth = 1;\n            this.panning = false;\n        }\n        return Controller.instance;\n    }\n\n    Init(canvaskit, canvas){\n        this.canvasKit = canvaskit;\n        this.canvas = canvas\n        this.surface = this.canvasKit.MakeCanvasSurface(this.canvas.id);\n        this.context = this.canvasKit.currentContext();\n        this.skcanvas = this.surface.getCanvas();\n        this.opacityVal = 1;\n        this.addListeners();\n        this.drawFrame();\n    }\n\n    setOpacity(val){\n        this.opacityVal = val;\n    }\n\n    getOpacity(){\n        return this.opacityVal;\n    }\n\n    setStrokeWidth(val){\n        this.strokeWidth = val;\n    }\n\n    getStrokeWidth(){\n        return this.strokeWidth;\n    }\n\n    setStrokeColor(val){\n        this.strokeColor = val;\n    }\n\n    getStrokeColor(){\n        return this.strokeColor;\n    }\n    addListeners(){\n        this.canvas.addEventListener('mousemove', this.onMouseMove);\n        this.canvas.addEventListener('wheel', this.onMouseWheel, false);\n    }\n\n    clearCanvas(){\n        this.paths = [];\n        this.paints = [];\n        this.drawFrame();\n    }\n\n    undo(){\n        if(this.paths.length)\n            this.paths.pop();\n        if(this.paints.length)\n            this.paints.pop();\n    }\n\n    startPan(){\n        this.panning = true;\n    }\n\n    endPan(){\n        this.panning = false;\n    }\n\n    onMouseWheel = (e) => {\n        e.preventDefault();\n        if (e.ctrlKey) {\n            // Get mouse offset.\n            let mousex = e.clientX - this.canvas.offsetLeft;\n            let mousey = e.clientY - this.canvas.offsetTop;\n            // Normalize wheel to +1 or -1.\n            let wheel = e.deltaY < 0 ? 1 : -1;\n\n            // Compute zoom factor.\n            let zoom = Math.exp(wheel*zoomIntensity);\n            \n            // Translate so the visible origin is at the context's origin.\n            this.skcanvas.translate(originx, originy);\n        \n            // Compute the new visible origin. Originally the mouse is at a\n            // distance mouse/scale from the corner, we want the point under\n            // the mouse to remain in the same place after the zoom, but this\n            // is at mouse/new_scale away from the corner. Therefore we need to\n            // shift the origin (coordinates of the corner) to account for this.\n            originx -= mousex/(scale*zoom) - mousex/scale;\n            originy -= mousey/(scale*zoom) - mousey/scale;\n            \n            // Scale it (centered around the origin due to the trasnslate above).\n            this.skcanvas.scale(zoom, zoom);\n            // Offset the visible origin to it's proper position.\n            this.skcanvas.translate(-originx, -originy);\n\n            // Update scale and others.\n            scale *= zoom;\n           // visibleWidth = width / scale;\n           // visibleHeight = height / scale;\n        } else {\n        // Your trackpad X and Y positions\n            originx += e.deltaX/scale;\n            originy += e.deltaY/scale;\n            this.skcanvas.translate(-e.deltaX/scale, -e.deltaY/scale);\n        }\n    }\n    \n    doPan = (e) => {\n        // TO DO: Pan on mouse move\n    }\n\n    onMouseMove = (e) => {\n        if (!e.buttons) {\n            this.hold = false;\n            return;\n        }\n        if(this.panning){\n            this.doPan(e);\n            return;\n        }\n        let mousex = originx + e.offsetX/scale;\n        let mousey = originy + e.offsetY/scale;\n        if (this.hold) {\n            this.paths[this.paths.length - 1].lineTo(mousex, mousey);\n        } else {\n            let paint = new this.canvasKit.SkPaint();\n            paint.setAntiAlias(true);\n            let clr = this.strokeColor;\n            paint.setColor(this.canvasKit.Color(clr.r, clr.g, clr.b, clr.a));\n            paint.setStyle(this.canvasKit.PaintStyle.Stroke);\n            paint.setStrokeCap(this.canvasKit.StrokeCap.Round);\n            paint.setStrokeJoin(this.canvasKit.StrokeJoin.Round);\n            paint.setStrokeWidth(this.strokeWidth);\n            paint.setPathEffect(this.canvasKit.SkPathEffect.MakeCorner(50));\n            this.paints.push(paint);\n            let path = new this.canvasKit.SkPath();\n            this.paths.push(path);\n            path.moveTo(mousex, mousey);\n        }\n        this.hold = true;\n    }\n\n    drawFrame = ()=>{\n        this.canvasKit.setCurrentContext(this.context);\n        this.skcanvas.clear({'r':255,'g':255,'b':255,'a':1});\n        for (let i = 0; i < this.paints.length && i < this.paths.length; i++) {\n            this.skcanvas.drawPath(this.paths[i], this.paints[i]);\n        }\n        this.skcanvas.flush();\n        requestAnimationFrame(this.drawFrame);\n    }\n\n}\nexport default new Controller();","import Controller from './Controller';\nclass Loader {\n    constructor(){\n        if (!Loader.instance){\n            Loader.instance = this;\n            this.canvas = null;\n        }\n        return Loader.instance;\n    }\n    initHtmlCanvas(canvas){\n        canvas.height = window.screen.height;\n        canvas.width = window.screen.width;\n        canvas.style.cursor = \"crosshair\";\n        this.canvas = canvas;\n    }\n\n    initCanvas(CanvasKit, canvas){\n        this.initHtmlCanvas(canvas);\n        Controller.Init(CanvasKit, canvas);\n    }\n\n    setOpacity(val){\n        Controller.setOpacity(val);\n    }\n\n    getOpacity(){\n        return Controller.getOpacity();\n    }\n\n    setStrokeWidth(val){\n        Controller.setStrokeWidth(val);\n    }\n\n    getStrokeWidth(){\n        return Controller.getStrokeWidth();\n    }\n\n    setStrokeColor(val){\n        Controller.setStrokeColor(val);\n    }\n\n    getStrokeColor(){\n        return Controller.getStrokeColor();\n    }\n\n    clearCanvas(){\n        Controller.clearCanvas();\n    }\n\n    undo(){\n        Controller.undo();\n    }\n\n    startPan(){\n        this.canvas.style.cursor = \"grab\";\n        Controller.startPan();\n    }\n    \n    endPan(){\n        this.canvas.style.cursor = \"crosshair\";\n        Controller.endPan();\n    }\n    \n}\n\nexport let loader = new Loader();","import React from 'react';\nimport './App.css';\nimport Canvas from \"./canvas/Canvas\";\nimport Toolbar from \"./tool/Toolbar\";\nimport {loader} from './core/Loader';\n\nexport default class App extends React.Component{\n\n  render() {\n    return <div>\n      <div className='toolbar'>\n      <Toolbar loaderRef={loader}/>\n      </div>\n      <div className='canvas'>\n      <Canvas loaderRef={loader}/>\n      </div>\n    </div>\n  };\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}