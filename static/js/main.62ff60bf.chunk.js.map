{"version":3,"sources":["logo.svg","core/Listeners.js","core/Loader.js","core/WasmLoader.js","canvas/CanvasModel.js","canvas/Canvas.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","scale","originx","originy","onMouseWheel","e","preventDefault","ctrlKey","mousex","clientX","canvas","offsetLeft","mousey","clientY","offsetTop","wheel","deltaY","zoom","Math","exp","skcanvas","translate","deltaX","onMouseMove","buttons","offsetX","offsetY","hold","paths","length","lineTo","paint","canvasKit","SkPaint","setAntiAlias","setColor","Color","setStyle","PaintStyle","Stroke","setStrokeWidth","setPathEffect","SkPathEffect","MakeCorner","random","paints","push","path","SkPath","moveTo","drawFrame","setCurrentContext","context","i","drawPath","flush","requestAnimationFrame","Listener","instance","this","canvaskit","surface","MakeCanvasSurface","id","currentContext","getCanvas","addListeners","addEventListener","loader","Loader","height","window","screen","width","style","cursor","CanvasKit","initHtmlCanvas","Init","CanvasKitInit","require","a","Promise","resolve","reject","ready","then","CanvasModel","loadWasm","initCanvas","Canvas","props","canvasRef","React","createRef","canvasModel","current","loadCanvasKit","className","ref","Component","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.62ff60bf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","\nlet zoomIntensity = 0.2;\nlet scale = 1;\nlet originx = 0;\nlet originy = 0;\nlet visibleWidth = 0;\nlet visibleHeight = 0;\n\nclass Listener {\n    constructor(){\n        if (!Listener.instance){\n            Listener.instance = this;\n            this.canvasKit = null;\n            this.paints = [];\n            this.paths = [];\n            this.hold = false;\n            this.path = null;\n        }\n        return Listener.instance;\n    }\n\n    Init(canvaskit, canvas){\n        this.canvasKit = canvaskit;\n        this.canvas = canvas\n        this.surface = this.canvasKit.MakeCanvasSurface(this.canvas.id);\n        this.context = this.canvasKit.currentContext();\n        this.skcanvas = this.surface.getCanvas();\n        this.addListeners();\n        this.drawFrame();\n    }\n\n    addListeners(){\n        this.canvas.addEventListener('mousemove', this.onMouseMove);\n        this.canvas.addEventListener('wheel', this.onMouseWheel, false);\n    }\n\n    onMouseWheel = (e) => {\n        e.preventDefault();\n        if (e.ctrlKey) {\n            // Get mouse offset.\n            let mousex = e.clientX - this.canvas.offsetLeft;\n            let mousey = e.clientY - this.canvas.offsetTop;\n            // Normalize wheel to +1 or -1.\n            let wheel = e.deltaY < 0 ? 1 : -1;\n\n            // Compute zoom factor.\n            let zoom = Math.exp(wheel*zoomIntensity);\n            \n            // Translate so the visible origin is at the context's origin.\n            this.skcanvas.translate(originx, originy);\n        \n            // Compute the new visible origin. Originally the mouse is at a\n            // distance mouse/scale from the corner, we want the point under\n            // the mouse to remain in the same place after the zoom, but this\n            // is at mouse/new_scale away from the corner. Therefore we need to\n            // shift the origin (coordinates of the corner) to account for this.\n            originx -= mousex/(scale*zoom) - mousex/scale;\n            originy -= mousey/(scale*zoom) - mousey/scale;\n            \n            // Scale it (centered around the origin due to the trasnslate above).\n            this.skcanvas.scale(zoom, zoom);\n            // Offset the visible origin to it's proper position.\n            this.skcanvas.translate(-originx, -originy);\n\n            // Update scale and others.\n            scale *= zoom;\n           // visibleWidth = width / scale;\n           // visibleHeight = height / scale;\n        } else {\n        // Your trackpad X and Y positions\n            originx += e.deltaX/scale;\n            originy += e.deltaY/scale;\n            this.skcanvas.translate(-e.deltaX/scale, -e.deltaY/scale);\n        }\n    }\n    \n    onMouseMove = (e) => {\n        if (!e.buttons) {\n            this.hold = false;\n            return;\n        }\n        let mousex = originx + e.offsetX/scale;\n        let mousey = originy + e.offsetY/scale;\n        if (this.hold) {\n            this.paths[this.paths.length - 1].lineTo(mousex, mousey);\n        } else {\n            let paint = new this.canvasKit.SkPaint();\n            paint.setAntiAlias(true);\n            paint.setColor(this.canvasKit.Color(0, 0, 0, 1.0));\n            paint.setStyle(this.canvasKit.PaintStyle.Stroke);\n            paint.setStrokeWidth(2.0);\n            paint.setPathEffect(this.canvasKit.SkPathEffect.MakeCorner(50));\n            paint.setColor(this.canvasKit.Color(Math.random() * 255, Math.random() * 255, Math.random() * 255, Math.random() + .2));\n            this.paints.push(paint);\n            let path = new this.canvasKit.SkPath();\n            this.paths.push(path);\n            path.moveTo(mousex, mousey);\n        }\n        this.hold = true;\n    }\n\n    drawFrame = ()=>{\n        this.canvasKit.setCurrentContext(this.context);\n        for (let i = 0; i < this.paints.length && i < this.paths.length; i++) {\n            this.skcanvas.drawPath(this.paths[i], this.paints[i]);\n        }\n        this.skcanvas.flush();\n        requestAnimationFrame(this.drawFrame);\n    }\n\n}\nexport default new Listener();","import Listener from './Listeners';\nclass Loader {\n    constructor(){\n        if (!Loader.instance){\n            Loader.instance = this;\n        }\n        return Loader.instance;\n    }\n    initHtmlCanvas(canvas){\n        canvas.height = window.screen.height;\n        canvas.width = window.screen.width;\n        canvas.style.cursor = \"crosshair\";\n    }\n\n    initCanvas(CanvasKit, canvas){\n        this.initHtmlCanvas(canvas);\n        Listener.Init(CanvasKit, canvas);\n    }\n}\n\nexport let loader = new Loader();","const CanvasKitInit = require('canvaskit-wasm/bin/canvaskit.js')\n\nexport default async function loadWasm(){\n    return new Promise((resolve, reject) => {\n        CanvasKitInit().ready().then((CanvasKit) => {\n            resolve(CanvasKit);\n        });\n    });\n}\n","\nimport {loader} from '../core/Loader';\nimport loadWasm from '../core/WasmLoader'\nexport class CanvasModel {\n    constructor() {\n        this.canvasKit = null;\n        this.canvas = null;\n    }\n\n    loadCanvasKit(canvas){\n        this.canvas = canvas;\n        loadWasm().then((CanvasKit) => {\n            this.canvasKit = CanvasKit;\n            loader.initCanvas(this.canvasKit, this.canvas);\n        });\n    }\n}","import React from 'react';\nimport {CanvasModel} from './CanvasModel';\nimport logo from '../logo.svg';\nimport \"./Canvas.css\"\n\nexport default class Canvas extends React.Component {\n    constructor(props) {\n        super(props);\n        this.canvasRef = React.createRef();\n        this.canvasModel = new CanvasModel();\n    }\n\n    componentDidMount() {\n        const canvas = this.canvasRef.current\n        this.canvasModel.loadCanvasKit(canvas);\n    }\n\n    render(){\n        return <div>\n        <canvas className=\"canvas\" id=\"canvas\" ref={this.canvasRef} />\n        </div>\n    }\n}","import React from 'react';\nimport './App.css';\nimport Canvas from \"./canvas/Canvas\";\n\nexport default class App extends React.Component{\n\n  render() {\n    return <Canvas/>\n  };\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}